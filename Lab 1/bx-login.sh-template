#!/bin/bash
# Information steps:
# 1) chmod u+x git-commit.sh
# 2) ./git-commit.sh

#API_ENDPOINT="https://api.eu-de.bluemix.net"
#SPACE_NAME="YOUR-CF-SPACE"
API_ENDPOINT="https://api.eu-gb.bluemix.net"
SPACE_NAME="OUR-CF-SPACE"

IBMCLOUD_CLI_DEVOPS_PLATFORM_KEY="YOUR_PLATFORM_KEY"
USER_ID="YOUR-ID"
RESOURCE_GROUP="default"
ORGANIZATION_NAME="YOUR-ORG"

KUBEVERSION_INSTALL="kubernetes-cli"
BREW_KUBECLI_GITPAGE="https://github.com/Homebrew/homebrew-core/blob/master/Formula/kubernetes-cli.rb"

#CONTAINER_REGISTRY="registry.eu-de.bluemix.net"
CONTAINER_REGISTRY="registry.eu-gb.bluemix.net"
CONTAINER_NAMESPACE="YOUR_SPACE"
DOCKER_IMAGE_NAME="hello-world" #also used as service name

#CLUSTER_NAME="YOUR_CLOUSTER_DE"
#CLUSTER_REGION_SETTING="eu-central"
CLUSTER_NAME="YOUR_CLOUSTER_UK"
CLUSTER_REGION_SETTING="uk-south"

STOP="move-on"
END="stop"

# echo "Using IBM preconfigured bash for the installation"
# curl -sL https://ibm.biz/idt-installer | bash
# echo ""

#Install the right Kubectl version
#=================================
#echo "Check kubectl version available on brew"
#brew info kubernetes-cli
#echo ""
#echo "The brew cache"
#brew --cache
#echo ""
#echo "Uninstall kubernetes-cli"
#brew uninstall $KUBEVERSION_INSTALL --force
#echo ""
#echo "Find the right version on $BREW_KUBECLI_GITPAGE"
#open $BREW_KUBECLI_GITPAGE
#echo "Press any key"
#read ANYKEY
#echo ""
#echo "Configuration of the needed kubectl version"
## See here: https://stackoverflow.com/questions/3939651/how-to-modify-a-homebrew-formula
#brew edit $KUBEVERSION_INSTALL
#echo "Save and press any key"
#read ANYKEY
#echo ""
#echo "Install $KUBEVERSION_INSTALL"
#brew install $KUBEVERSION_INSTALL
#echo ""

echo "**********************"
echo "******* LAB 1 ********"
echo "**********************"
echo ""
echo "IBM Cloud CLI login"
echo "*****************"
bx login -u $USER_ID  -o $ORGANIZATION_NAME -apikey $IBMCLOUD_CLI_DEVOPS_PLATFORM_KEY -s $SPACE_NAME -g $RESOURCE_GROUP -a $API_ENDPOINT
bx info
echo ""
echo "Logon to the container registry"
echo "*****************"
ibmcloud cr login
echo ""
echo "Add container registry name space $CONTAINER_NAMESPACE"
echo "*****************"
ibmcloud cr namespace-add $CONTAINER_NAMESPACE
echo ""
echo "List container registry name spaces"
echo "*****************"
ibmcloud cr namespace-list
echo ""
echo "Build docker image with tag"
docker build --tag $CONTAINER_REGISTRY/$CONTAINER_NAMESPACE/$DOCKER_IMAGE_NAME .
echo ""
echo "List docker images"
echo "*****************"
docker images
echo ""
echo "Push docker image into $CONTAINER_REGISTRY/$CONTAINER_NAMESPACE"
echo "*****************"
docker push $CONTAINER_REGISTRY/$CONTAINER_NAMESPACE/$DOCKER_IMAGE_NAME
echo ""
echo "Set cluster region settings $CLUSTER_REGION_SETTING"
echo "*****************"
ibmcloud cs region-set $CLUSTER_REGION_SETTING
echo ""
echo "List clusters with cs"
echo "*****************"
ibmcloud cs clusters
echo "List clusters with ks"
echo "*****************"
ibmcloud ks clusters
echo ""
echo "List workers for cluster '$CLUSTER_NAME' "
echo "*****************"
ibmcloud ks workers $CLUSTER_NAME
echo ""
echo "Get the configuration information"
echo "*****************"
bx cs cluster-get $CLUSTER_NAME --json
echo ""
echo "Get cluster configuration for '$CLUSTER_NAME' "
echo "*****************"
ibmcloud cs cluster-config $CLUSTER_NAME -admin
echo ""
echo "Copy and past the cluster configuration export path"
echo "*****************"
echo ""
read CLUSTER_CONFIGURATION_PATH
echo ""
echo "Execution of the export"
echo "*****************"
$CLUSTER_CONFIGURATION_PATH
echo ""
echo "Show kubectl version"
echo "*****************"
kubectl version
echo ""
echo "Kubectl get deployment for $DOCKER_IMAGE_NAME"
echo "*****************"
kubectl get deployment $DOCKER_IMAGE_NAME
echo ""
echo "Kubectl DELETE deployment for $DOCKER_IMAGE_NAME"
echo "*****************"
#kubectl delete deployment $DOCKER_IMAGE_NAME --namepace=default
kubectl delete deployment $DOCKER_IMAGE_NAME
echo ""
echo "kubectl run image $DOCKER_IMAGE_NAME"
echo "*****************"
kubectl run $DOCKER_IMAGE_NAME --image=$CONTAINER_REGISTRY/$CONTAINER_NAMESPACE/$DOCKER_IMAGE_NAME
echo ""
echo "kubectl get pods"
echo "*****************"
STOP="move-on"
END="stop"
i=0
while [ "$STOP" != "$END" ]
do
  echo "--- While loop: ($((i++))) ---"
  kubectl get pods
  echo "------"
  echo "When the status of the image '$DOCKER_IMAGE_NAME' is 'running' enter: 'stop' otherwise press 'enter'"
  read STOP
  echo ""
done
echo "kubectl expose"
echo "*****************"
echo "Enter Type for example 'NodePort'"
read NODEPORT
echo "Port for example '8080'"
read PORT
echo ""
echo "Do expose $DOCKER_IMAGE_NAME"
kubectl expose deployment/$DOCKER_IMAGE_NAME --type=$NODEPORT  --port=$PORT
echo ""
echo "Examine your new service"
echo ""
kubectl describe service $DOCKER_IMAGE_NAME
echo ""
echo "Enter the NodePort value of the service $CLUSTER_NAME:"
read NODEPORT_VALUE
echo ""
echo "Now get the public IP from the running workers of the cluster $CLUSTER_NAME"
ibmcloud cs workers $CLUSTER_NAME
echo ""
echo "Enter Public IP and press enter"
read PUBLIC_IP
echo ""
echo "Now the app is running on cluster $CLUSTER_NAME and you can access the app in the browser"
echo "Using 'http://$PUBLIC_IP:$NODEPORT_VALUE'"
echo "Press any key to open the browser"
echo "*****************"
read ANYKEY
open "http://$PUBLIC_IP:$NODEPORT_VALUE"
echo "Press any key to move on with the next lab"
echo "*****************"
read ANYKEY
echo ""
echo "**********************"
echo "******* LAB 2 ********"
echo "Scale apps with replicas"
echo "**********************"
echo ""
echo "Now edit the deployment YAML by changing the 'replicas:' to 10' press 'enter' to open the deployment"
echo "Here is a VI http://www.atmos.albany.edu/daes/atmclasses/atm350/vi_cheat_sheet.pdfBM "
echo "*****************"
read ANYKEY
kubectl edit deployment/$DOCKER_IMAGE_NAME
echo "Press any key to move on"
echo "*****************"
read ANYKEY
echo ""
echo "Getting the rollout status 'kubectl rollout status deployment/$DOCKER_IMAGE_NAME''"
echo "*****************"
kubectl rollout status deployment/$DOCKER_IMAGE_NAME
echo "kubectl get pods"
echo "*****************"
i=0
while [ "$STOP" != "$END" ]
do
  echo "--- While loop: ($((i++))) ---"
  kubectl get pods
  echo "------"
  echo "When the status of the pods '$DOCKER_IMAGE_NAME' are 'running' enter: 'stop' otherwise press 'enter'"
  read STOP
  echo ""
done
echo "Build and push docker images with tag"
echo "*****************"
i=1
while [ 3 -gt $i ]
do
  echo "------"
  echo "build container '$i': '$CONTAINER_REGISTRY/$CONTAINER_NAMESPACE/$DOCKER_IMAGE_NAME:$i'"
  docker build --tag "$CONTAINER_REGISTRY/$CONTAINER_NAMESPACE/$DOCKER_IMAGE_NAME:$i"  "."
  echo "push container '$i': '$CONTAINER_REGISTRY/$CONTAINER_NAMESPACE/$DOCKER_IMAGE_NAME:$i'"
  docker push "$CONTAINER_REGISTRY/$CONTAINER_NAMESPACE/$DOCKER_IMAGE_NAME:$i"
  echo "--- '$i': While loop (build and push image to registry): (($((i++))) ---"
done

echo "**********************"
echo "******* LAB 2 ********"
echo "Update and roll back apps current section"
echo "**********************"
echo ""
echo "kubectl SET IMAGE deployment with for '$DOCKER_IMAGE_NAME' tag '$i'"
echo "** 'deployment/$DOCKER_IMAGE_NAME'"
echo "** '$CONTAINER_REGISTRY/$CONTAINER_NAMESPACE/$DOCKER_IMAGE_NAME:$i'"
echo "*****************"
# https://www.mankier.com/1/kubectl-set-image
kubectl set image "deployment/$DOCKER_IMAGE_NAME" "$DOCKER_IMAGE_NAME=$CONTAINER_REGISTRY/$CONTAINER_NAMESPACE/$DOCKER_IMAGE_NAME:$i"
echo ""
echo "Getting the rollout status 'kubectl rollout status deployment/$DOCKER_IMAGE_NAME''"
echo "*****************"
kubectl rollout status deployment/$DOCKER_IMAGE_NAME
i=1
while [ "$STOP" != "$END" ]
do
  echo "--- While loop: ($((i++))) --"
  kubectl get replicasets
  echo "------"
  echo "Status of the replicasets '$DOCKER_IMAGE_NAME' are 'running' enter: 'stop' otherwise press 'enter'"
  read STOP
  echo ""
done
echo "Confirm that your new code is active '$PUBLIC_IP:$NODEPORT_VALUE"
echo "*****************"
curl $PUBLIC_IP:$NODEPORT_VALUE
echo ""
echo "Undo rollout 'deployment/$DOCKER_IMAGE_NAME'"
echo "*****************"
kubectl rollout undo deployment/$DOCKER_IMAGE_NAME
